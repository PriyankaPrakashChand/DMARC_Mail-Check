//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Dmarc.DnsRecord.Evaluator.Spf.Rules {
    using System;
    using System.Reflection;
    
    
    /// <summary>
    ///    A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public class SpfRulesResource {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        internal SpfRulesResource() {
        }
        
        /// <summary>
        ///    Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Dmarc.DnsRecord.Evaluator.Spf.Rules.SpfRulesResource", typeof(SpfRulesResource).GetTypeInfo().Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///    Overrides the current thread's CurrentUICulture property for all
        ///    resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///    Looks up a localized string similar to Last mechanism term should be “all” but was {0}..
        /// </summary>
        public static string AllMustBeLastMechanismErrorMessage {
            get {
                return ResourceManager.GetString("AllMustBeLastMechanismErrorMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///    Looks up a localized string similar to Record should not contain “ptr”..
        /// </summary>
        public static string DontUsePtrMechanismErrorMessage {
            get {
                return ResourceManager.GetString("DontUsePtrMechanismErrorMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///    Looks up a localized string similar to Record should not contain “exp” more than once. This record has {0} “exp” terms..
        /// </summary>
        public static string ExplanationDoesntOccurMoreThanOnceErrorMessage {
            get {
                return ResourceManager.GetString("ExplanationDoesntOccurMoreThanOnceErrorMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///    Looks up a localized string similar to Record length should be less than or equal to {0} characters. This record has {1} characters..
        /// </summary>
        public static string MaxLengthOf450CharactersErrorMessage {
            get {
                return ResourceManager.GetString("MaxLengthOf450CharactersErrorMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///    Looks up a localized string similar to Mechanisms (“a”, ”mx”, ”ptr”, ”ip4”, ”ip6”, ”exists”) should appear before modifiers (“redirect”, “exp”)..
        /// </summary>
        public static string ModifiersOccurAfterMechanismsErrorMessage {
            get {
                return ResourceManager.GetString("ModifiersOccurAfterMechanismsErrorMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///    Looks up a localized string similar to Domain should have exactly 1 SPF record. This domain has {0}..
        /// </summary>
        public static string OnlyOneSpfRecordErrorMessage {
            get {
                return ResourceManager.GetString("OnlyOneSpfRecordErrorMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///    Looks up a localized string similar to Record should not contain “redirect” more than once. This record has {0} “redirect” terms..
        /// </summary>
        public static string RedirectDoesntOccurMoreThanOnceErrorMessage {
            get {
                return ResourceManager.GetString("RedirectDoesntOccurMoreThanOnceErrorMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///    Looks up a localized string similar to Record should not contain both “redirect” and “all”..
        /// </summary>
        public static string RedirectModifierAndAllMechanismNotValidErrorMessage {
            get {
                return ResourceManager.GetString("RedirectModifierAndAllMechanismNotValidErrorMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///    Looks up a localized string similar to Only “-all” ({0} other ip addresses) or “~all” ({1} other ip addresses) protect recipients from spoofed mail. Consider changing from {2} ({3} other ip addresses) to “-all” or “~all”..
        /// </summary>
        public static string ShouldHaveHardFailAllEnabledErrorMessage {
            get {
                return ResourceManager.GetString("ShouldHaveHardFailAllEnabledErrorMessage", resourceCulture);
            }
        }
    }
}
