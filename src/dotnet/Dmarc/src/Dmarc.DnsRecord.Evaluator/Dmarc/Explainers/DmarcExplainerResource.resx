<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AdkimRelaxedExplanation" xml:space="preserve">
    <value>DKIM domain field must match any sub domain of the domain in From: email header.</value>
  </data>
  <data name="AdkimStrictExplanation" xml:space="preserve">
    <value>DKIM domain field must match exactly the domain in From: email header.</value>
  </data>
  <data name="AspfRelaxedExplanation" xml:space="preserve">
    <value>SPF domain field must match any sub domain of the domain in  SMTP HELO / SMTP MAIL FROM.</value>
  </data>
  <data name="AspfStrictExplanation" xml:space="preserve">
    <value>SPF domain field must match exactly the domain in  SMTP HELO / SMTP MAIL FROM.</value>
  </data>
  <data name="FailureOptionsDExplanation" xml:space="preserve">
    <value>Generate a forensic report if DKIM check fails.</value>
  </data>
  <data name="FailureOptionsOneExplanation" xml:space="preserve">
    <value>Generate a forensic report if SPF or DKIM checks fail.</value>
  </data>
  <data name="FailureOptionsSExplanation" xml:space="preserve">
    <value>Generate a forensic report if SPF check fails.</value>
  </data>
  <data name="FailureOptionsZeroExplanation" xml:space="preserve">
    <value>Generate a forensic report if SPF and DKIM checks fail.</value>
  </data>
  <data name="PercentExplanation" xml:space="preserve">
    <value>Policy (p) applies to {0} % of unauthorised mail for this domain.</value>
  </data>
  <data name="PolicyNoneExplanation" xml:space="preserve">
    <value>Mail servers receiving mail for this domain will report statistics for messages from this domain.</value>
  </data>
  <data name="PolicyQuarantineExplanation" xml:space="preserve">
    <value>Mail servers receiving mail for this domain will report statistics for messages from this domain and will mark as messages as spam (usually ending up in recipients spam folder).</value>
  </data>
  <data name="PolicyRejectExplanation" xml:space="preserve">
    <value>Mail servers receiving mail for this domain will report statistics for messages from this domain and will reject messages as spam (message wont reach recipient).</value>
  </data>
  <data name="ReportFormatAFRFExplanation" xml:space="preserve">
    <value>Forensic reports will be sent in AFRF (Authentication Failure Reporting Format) format.</value>
  </data>
  <data name="ReportIntervalExplanation" xml:space="preserve">
    <value>Aggregate reports should be sent every {0} seconds ({1} hours).</value>
  </data>
  <data name="ReportUriAggregateExplanation" xml:space="preserve">
    <value>Send aggregate reports to: {0}.</value>
  </data>
  <data name="ReportUriForensicExplanation" xml:space="preserve">
    <value>Send forensic reports to: {0}.</value>
  </data>
  <data name="SubDomainPolicyNoneExplanation" xml:space="preserve">
    <value>Mail servers receiving mail for subdomains of this domain will report statistics for messages from subdomains.</value>
  </data>
  <data name="SubDomainPolicyQuarantineExplanation" xml:space="preserve">
    <value>Mail servers receiving mail for subdomains of this domain will report statistics for messages from subdomains and will mark as messages as spam (usually ending up in recipients spam folder).</value>
  </data>
  <data name="SubDomainPolicyRejectExplanation" xml:space="preserve">
    <value>Mail servers receiving mail for subdomains of this domain will report statistics for messages from subdomains and will reject messages as spam (message wont reach recipient).</value>
  </data>
  <data name="VersionDmarc1Explanation" xml:space="preserve">
    <value>DMARC version 1.</value>
  </data>
</root>