<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="InsertCertificates" xml:space="preserve">
    <value>INSERT INTO `certificate`
(`thumb_print`,
`raw_data`)
VALUES</value>
  </data>
  <data name="InsertCertificatesOnDuplicateKey" xml:space="preserve">
    <value>ON DUPLICATE KEY UPDATE `thumb_print` = VALUES(`thumb_print`);</value>
  </data>
  <data name="InsertCertificateValuesFormatString" xml:space="preserve">
    <value>(@a{0},
@b{0})</value>
  </data>
  <data name="InsertMapping" xml:space="preserve">
    <value>INSERT INTO `certificate_mapping`
(`sequence`,
`dns_record_mx_tls_profile_id`,
`certificate_thumb_print`)
VALUES</value>
  </data>
  <data name="InsertMappingOnDuplicateKey" xml:space="preserve">
    <value>ON DUPLICATE KEY UPDATE `sequence` = VALUES(`sequence`);
</value>
  </data>
  <data name="InsertMappingValueFormatString" xml:space="preserve">
    <value>(@a{0},
@b{0},
@c{0})</value>
  </data>
  <data name="InsertRecord" xml:space="preserve">
    <value>INSERT INTO `dns_record_mx_tls_profile_results`
(`id`,`mx_record_id`,
`end_date`, 
`failure_count`,
`data`)
VALUES</value>
  </data>
  <data name="InsertRecordOnDuplicateKey" xml:space="preserve">
    <value>ON DUPLICATE KEY UPDATE `end_date` = VALUES(`end_date`),
`failure_count` = VALUES(`failure_count`),
`last_checked` = UTC_TIMESTAMP();
SELECT LAST_INSERT_ID();</value>
  </data>
  <data name="InsertRecordValueFormatString" xml:space="preserve">
    <value>(@a{0},
@b{0},
@c{0},
@d{0},
@e{0})</value>
  </data>
  <data name="SelectSecurityProfilesToUpdate" xml:space="preserve">
    <value>SELECT 
    temp.domain_id,
    temp.domain_name,
    mx.id AS 'mx_record_id',
    mx.hostname AS 'mx_record_hostname',
    tls.id AS 'tls_security_profile_id',
	tls.failure_count as 'failure_count',
	tls.data as 'data',	 
    temp.lst_checked AS 'last_checked',
    c.thumb_print AS 'certificate_thumb_print',
    c.raw_data AS 'certificate_raw_data'
FROM (
	SELECT d1.id as domain_id,
	d1.name as domain_name,
	MAX(COALESCE(tls1.last_checked, '1900-01-01')) as lst_checked
	FROM domain d1
	JOIN dns_record_mx mx1 ON mx1.domain_id = d1.id AND (d1.monitor = b'1' OR d1.publish = b'1') AND mx1.end_date IS NULL 
	LEFT JOIN dns_record_mx_tls_profile_results tls1 ON mx1.id = tls1.mx_record_id AND tls1.end_date IS NULL
	WHERE (tls1.id IS NULL ||
		(UTC_TIMESTAMP() &gt; DATE_ADD(tls1.last_checked, INTERVAL @refreshIntervalSeconds SECOND) &amp;&amp; (tls1.failure_count = 0 || tls1.failure_count &gt;= 3)) ||
		(UTC_TIMESTAMP() &gt; DATE_ADD(tls1.last_checked, INTERVAL @failureRefreshIntervalSeconds SECOND) &amp;&amp;  (tls1.failure_count &gt; 0 &amp;&amp; tls1.failure_count &lt;= 2)))
	GROUP BY d1.id
	ORDER BY lst_checked, d1.id
	LIMIT @limit
) AS temp
JOIN dns_record_mx mx ON temp.domain_id = mx.domain_id AND mx.end_date IS NULL
LEFT JOIN dns_record_mx_tls_profile_results tls ON mx.id = tls.mx_record_id AND tls.end_date IS NULL
LEFT JOIN certificate_mapping cm on cm.dns_record_mx_tls_profile_id = tls.id
LEFT JOIN certificate c on c.thumb_print = cm.certificate_thumb_print
ORDER BY temp.lst_checked, mx.id, cm.sequence;</value>
  </data>
</root>