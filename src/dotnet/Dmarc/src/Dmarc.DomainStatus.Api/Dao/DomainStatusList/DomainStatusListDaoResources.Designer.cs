//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Dmarc.DomainStatus.Api.Dao.DomainStatusList {
    using System;
    using System.Reflection;
    
    
    /// <summary>
    ///    A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public class DomainStatusListDaoResources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        internal DomainStatusListDaoResources() {
        }
        
        /// <summary>
        ///    Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Dmarc.DomainStatus.Api.Dao.DomainStatusList.DomainStatusListDaoResources", typeof(DomainStatusListDaoResources).GetTypeInfo().Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///    Overrides the current thread's CurrentUICulture property for all
        ///    resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///    Looks up a localized string similar to SELECT COUNT(*) FROM domain d WHERE (@search IS null OR d.name LIKE CONCAT(&apos;%&apos;, @search, &apos;%&apos;)) AND (d.publish=b&apos;1&apos; OR d.monitor=b&apos;1&apos;).
        /// </summary>
        public static string SelectCount {
            get {
                return ResourceManager.GetString("SelectCount", resourceCulture);
            }
        }
        
        /// <summary>
        ///    Looks up a localized string similar to SELECT COUNT(*) 
        ///FROM group_user_mapping gum
        ///JOIN `group` g ON g.id = gum.group_id
        ///JOIN group_domain_mapping gdm on g.id = gdm.group_id
        ///JOIN domain d on d.id = gdm.domain_id AND (d.publish=b&apos;1&apos; OR d.monitor=b&apos;1&apos;)
        ///WHERE gum.user_id = @userId 
        ///AND (@search IS null OR d.name LIKE CONCAT(&apos;%&apos;, @search, &apos;%&apos;)).
        /// </summary>
        public static string SelectCountByUserId {
            get {
                return ResourceManager.GetString("SelectCountByUserId", resourceCulture);
            }
        }
        
        /// <summary>
        ///    Looks up a localized string similar to  SELECT 
        ///d.id as domain_id,
        ///d.name as domain_name,
        ///MAX(IF(tls.mx_record_id IS NULL, 4, tls.tls_status)) as tls_status,
        ///dmarc.record IS NOT NULL as has_dmarc,
        ///COALESCE(dmarc_rm.max_error_severity, 
        ///IF(COUNT(DISTINCT(dmarc.id)) = 0, &apos;none&apos;,
        ///IF(dmarc_rm.domain_id IS NULL,&apos;pending&apos;,&apos;success&apos;))) as dmarc_status,
        ///COALESCE(spf_rm.max_error_severity, 
        ///IF(COUNT(DISTINCT(spf.id)) = 0, &apos;none&apos;,
        ///IF(spf_rm.domain_id IS NULL,&apos;pending&apos;,&apos;success&apos;))) as spf_status
        ///FROM domain d 
        ///LEFT JOIN dns_record_mx mx ON mx.do [rest of string was truncated]&quot;;.
        /// </summary>
        public static string SelectDomainSecurityInfoByDomainNames {
            get {
                return ResourceManager.GetString("SelectDomainSecurityInfoByDomainNames", resourceCulture);
            }
        }
        
        /// <summary>
        ///    Looks up a localized string similar to  SELECT 
        ///d.id as domain_id,
        ///d.name as domain_name,
        ///MAX(IF(tls.mx_record_id IS NULL, 4, tls.tls_status)) as tls_status,
        ///dmarc.record IS NOT NULL as has_dmarc,
        ///COALESCE(dmarc_rm.max_error_severity, 
        ///	IF(COUNT(DISTINCT(dmarc.id)) = 0, &apos;none&apos;,
        ///		IF(dmarc_rm.domain_id IS NULL,&apos;pending&apos;,&apos;success&apos;))) as dmarc_status,
        ///COALESCE(spf_rm.max_error_severity, 
        ///	IF(COUNT(DISTINCT(spf.id)) = 0, &apos;none&apos;,
        ///		IF(spf_rm.domain_id IS NULL,&apos;pending&apos;,&apos;success&apos;))) as spf_status
        ///FROM domain d
        ///LEFT JOIN dns_record_mx mx ON  [rest of string was truncated]&quot;;.
        /// </summary>
        public static string SelectDomainsSecurityInfo {
            get {
                return ResourceManager.GetString("SelectDomainsSecurityInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///    Looks up a localized string similar to  SELECT 
        ///d.id as domain_id,
        ///d.name as domain_name,
        ///MAX(IF(tls.mx_record_id IS NULL, 4, tls.tls_status)) as tls_status,
        ///dmarc.record IS NOT NULL as has_dmarc,
        ///COALESCE(dmarc_rm.max_error_severity, 
        ///IF(COUNT(DISTINCT(dmarc.id)) = 0, &apos;none&apos;,
        ///IF(dmarc_rm.domain_id IS NULL,&apos;pending&apos;,&apos;success&apos;))) as dmarc_status,
        ///COALESCE(spf_rm.max_error_severity, 
        ///IF(COUNT(DISTINCT(spf.id)) = 0, &apos;none&apos;,
        ///IF(spf_rm.domain_id IS NULL,&apos;pending&apos;,&apos;success&apos;))) as spf_status
        ///FROM group_user_mapping gum
        ///JOIN `group` g ON g.id [rest of string was truncated]&quot;;.
        /// </summary>
        public static string SelectDomainsSecurityInfoByUserId {
            get {
                return ResourceManager.GetString("SelectDomainsSecurityInfoByUserId", resourceCulture);
            }
        }
        
        /// <summary>
        ///    Looks up a localized string similar to  SELECT d.id AS domain_id, d.name AS domain_name, dmarc.record IS NOT NULL as has_dmarc, COALESCE(dmarc_rm.max_error_severity, &quot;none&quot;) AS dmarc_status, COALESCE(spf_rm.max_error_severity, &quot;none&quot;) AS spf_status, COALESCE(MAX(tls.tls_status), 0) AS tls_status
        ///FROM domain d
        ///LEFT JOIN dns_record_mx mx 
        ///ON mx.domain_id = d.id
        ///LEFT JOIN dns_record_mx_tls_evaluator_results tls 
        ///ON mx.id = tls.mx_record_id
        ///LEFT JOIN dns_record_dmarc dmarc 
        ///ON dmarc.domain_id = d.id
        ///LEFT JOIN dns_record_dmarc_read_model dmarc_rm  
        ///ON [rest of string was truncated]&quot;;.
        /// </summary>
        public static string SelectSubdomains {
            get {
                return ResourceManager.GetString("SelectSubdomains", resourceCulture);
            }
        }
        
        /// <summary>
        ///    Looks up a localized string similar to SELECT id, name FROM domain
        ///WHERE name = @term
        ///AND (monitor = 1 || publish = 1)
        ///LIMIT 1;.
        /// </summary>
        public static string SelectWelcomeSearchResult {
            get {
                return ResourceManager.GetString("SelectWelcomeSearchResult", resourceCulture);
            }
        }
    }
}
