<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="SelectCount" xml:space="preserve">
    <value>SELECT COUNT(*) FROM domain d WHERE (@search IS null OR d.name LIKE CONCAT('%', @search, '%')) AND (d.publish=b'1' OR d.monitor=b'1')</value>
  </data>
  <data name="SelectCountByUserId" xml:space="preserve">
    <value>SELECT COUNT(*) 
FROM group_user_mapping gum
JOIN `group` g ON g.id = gum.group_id
JOIN group_domain_mapping gdm on g.id = gdm.group_id
JOIN domain d on d.id = gdm.domain_id AND (d.publish=b'1' OR d.monitor=b'1')
WHERE gum.user_id = @userId 
AND (@search IS null OR d.name LIKE CONCAT('%', @search, '%'))</value>
  </data>
  <data name="SelectDomainSecurityInfoByDomainNames" xml:space="preserve">
    <value>SELECT 
d.id as domain_id,
d.name as domain_name,
MAX(IF(tls.mx_record_id IS NULL, 4, tls.tls_status)) as tls_status,
dmarc.record IS NOT NULL as has_dmarc,
COALESCE(dmarc_rm.max_error_severity, 
IF(COUNT(DISTINCT(dmarc.id)) = 0, 'none',
IF(dmarc_rm.domain_id IS NULL,'pending','success'))) as dmarc_status,
COALESCE(spf_rm.max_error_severity, 
IF(COUNT(DISTINCT(spf.id)) = 0, 'none',
IF(spf_rm.domain_id IS NULL,'pending','success'))) as spf_status
FROM domain d 
LEFT JOIN dns_record_mx mx ON mx.domain_id = d.id
LEFT JOIN dns_record_mx_tls_evaluator_results tls ON mx.id = tls.mx_record_id
LEFT JOIN dns_record_dmarc dmarc ON dmarc.domain_id = d.id
LEFT JOIN dns_record_dmarc_read_model dmarc_rm on dmarc_rm.domain_id = d.id
LEFT JOIN dns_record_spf spf ON spf.domain_id = d.id
LEFT JOIN dns_record_spf_read_model spf_rm on spf_rm.domain_id = d.id
WHERE LOWER(d.name) IN  ({0})
AND mx.end_date IS NULL
AND dmarc.end_date IS NULL
AND spf.end_date IS NULL
GROUP BY d.id
ORDER BY d.name;</value>
  </data>
  <data name="SelectDomainsSecurityInfo" xml:space="preserve">
    <value>SELECT 
d.id as domain_id,
d.name as domain_name,
MAX(IF(tls.mx_record_id IS NULL, 4, tls.tls_status)) as tls_status,
dmarc.record IS NOT NULL as has_dmarc,
COALESCE(dmarc_rm.max_error_severity, 
	IF(COUNT(DISTINCT(dmarc.id)) = 0, 'none',
		IF(dmarc_rm.domain_id IS NULL,'pending','success'))) as dmarc_status,
COALESCE(spf_rm.max_error_severity, 
	IF(COUNT(DISTINCT(spf.id)) = 0, 'none',
		IF(spf_rm.domain_id IS NULL,'pending','success'))) as spf_status
FROM domain d
LEFT JOIN dns_record_mx mx ON mx.domain_id = d.id
LEFT JOIN dns_record_mx_tls_evaluator_results tls ON mx.id = tls.mx_record_id
LEFT JOIN dns_record_dmarc dmarc ON dmarc.domain_id = d.id
LEFT JOIN dns_record_dmarc_read_model dmarc_rm on dmarc_rm.domain_id = d.id
LEFT JOIN dns_record_spf spf ON spf.domain_id = d.id
LEFT JOIN dns_record_spf_read_model spf_rm on spf_rm.domain_id = d.id
WHERE (d.monitor =b'1' OR d.publish=b'1') AND mx.end_date IS NULL
AND dmarc.end_date IS NULL
AND spf.end_date IS NULL
AND (@search IS NULL OR d.name LIKE CONCAT('%', @search,'%'))
GROUP BY d.id
ORDER BY d.name
LIMIT @offset,@pageSize;</value>
  </data>
  <data name="SelectDomainsSecurityInfoByUserId" xml:space="preserve">
    <value>SELECT 
d.id as domain_id,
d.name as domain_name,
MAX(IF(tls.mx_record_id IS NULL, 4, tls.tls_status)) as tls_status,
dmarc.record IS NOT NULL as has_dmarc,
COALESCE(dmarc_rm.max_error_severity, 
IF(COUNT(DISTINCT(dmarc.id)) = 0, 'none',
IF(dmarc_rm.domain_id IS NULL,'pending','success'))) as dmarc_status,
COALESCE(spf_rm.max_error_severity, 
IF(COUNT(DISTINCT(spf.id)) = 0, 'none',
IF(spf_rm.domain_id IS NULL,'pending','success'))) as spf_status
FROM group_user_mapping gum
JOIN `group` g ON g.id = gum.group_id
JOIN group_domain_mapping gdm ON g.id = gdm.group_id
JOIN domain d ON d.id = gdm.domain_id AND (d.publish=b'1' OR d.monitor=b'1')
LEFT JOIN dns_record_mx mx ON mx.domain_id = d.id
LEFT JOIN dns_record_mx_tls_evaluator_results tls ON mx.id = tls.mx_record_id
LEFT JOIN dns_record_dmarc dmarc ON dmarc.domain_id = d.id
LEFT JOIN dns_record_dmarc_read_model dmarc_rm on dmarc_rm.domain_id = d.id
LEFT JOIN dns_record_spf spf ON spf.domain_id = d.id
LEFT JOIN dns_record_spf_read_model spf_rm on spf_rm.domain_id = d.id
WHERE gum.user_id = @userId 
AND mx.end_date IS NULL
AND dmarc.end_date IS NULL
AND spf.end_date IS NULL
AND (@search IS NULL OR d.name LIKE CONCAT('%', @search,'%'))
GROUP BY d.id
ORDER BY d.name
LIMIT @offset, @pageSize;</value>
  </data>
  <data name="SelectSubdomains" xml:space="preserve">
    <value>SELECT d.id AS domain_id, d.name AS domain_name, dmarc.record IS NOT NULL as has_dmarc, COALESCE(dmarc_rm.max_error_severity, "none") AS dmarc_status, COALESCE(spf_rm.max_error_severity, "none") AS spf_status, COALESCE(MAX(tls.tls_status), 0) AS tls_status
FROM domain d
LEFT JOIN dns_record_mx mx 
ON mx.domain_id = d.id
LEFT JOIN dns_record_mx_tls_evaluator_results tls 
ON mx.id = tls.mx_record_id
LEFT JOIN dns_record_dmarc dmarc 
ON dmarc.domain_id = d.id
LEFT JOIN dns_record_dmarc_read_model dmarc_rm  
ON dmarc_rm.domain_id = d.id
LEFT JOIN dns_record_spf spf 
ON spf.domain_id = d.id
LEFT JOIN dns_record_spf_read_model spf_rm 
ON spf_rm.domain_id = d.id
WHERE d.name LIKE CONCAT("%.", LOWER(@domain))
AND (d.publish=b'1' OR d.monitor=b'1')
AND d.exdirectory=b'0'
AND mx.end_date IS NULL
AND dmarc.end_date IS NULL
AND spf.end_date IS NULL
GROUP BY d.id
ORDER BY d.name
LIMIT @pageSize
OFFSET @offset;</value>
  </data>
  <data name="SelectWelcomeSearchResult" xml:space="preserve">
    <value>SELECT id, name FROM domain
WHERE name = @term
AND (monitor = 1 || publish = 1)
LIMIT 1;</value>
  </data>
</root>